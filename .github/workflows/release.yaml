on:
  push:
    tags: [ '*.*.*' ]

name: Release

jobs:
  prepare:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@master
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: ''
          draft: true
          prerelease: false
      - name: Record upload URL
        run: |
          echo "::set-env name==release_upload_url::${{ steps.create_release.outputs.upload_url }}" > release-upload-url.txt
      - name: Share upload URL
        uses: actions/upload-artifact@v1
        with:
          name: release-upload-url
          path: release-upload-url.txt
  unix:
    name: Upload Unix binaries
    needs: [prepare]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest]
        rust: [stable]

    steps:
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust }}
      - name: Checkout code
        uses: actions/checkout@master
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Release
        run: cargo build --verbose --release
      - name: Run tests
        run: cargo test --verbose --release
      - name: Pick up upload URL
        uses: actions/download-artifact@v1
        with:
          name: release-upload-url
      - name: Prepare to upload artifacts
        run: |
          cat release-upload-url/release-upload-url.txt
          rm -rf release-upload-url/
          eval $(rustc --print cfg | grep target_)
          echo "::set-env name=target_triple::${target_arch:-unknown}-${target_vendor:-unknown}-${target_os:-unknown}${target_env:+-}${target_env:-}"
      - name: Package binary distributions
        run: |
          tar -czf target/k8s-gcr-auth-helper-${{ env.target_triple }}.tar.gz -C target/release k8s-gcr-auth-helper
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.release_upload_url }}
          asset_path: target/k8s-gcr-auth-helper-${{ env.target_triple }}.tar.gz
          asset_name: k8s-gcr-auth-helper-${{ env.target_triple }}.tar.gz
          asset_content_type: application/tar+gzip
  windows:
    name: Upload Windows binaries
    needs: [prepare]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        rust: [stable]
    steps:
      - uses: hecrj/setup-rust-action@v1
        with:
          rust-version: ${{ matrix.rust }}
      - uses: actions/checkout@v2
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Prep for installer build
        run: cargo install cargo-wix
      - name: Release
        run: |
          cargo build --verbose --release --no-default-features --features rustls-tls
          cargo wix --no-build --nocapture
          (cargo pkgid) -replace "^.*#","" -replace "([^0-9.].*)?$","" -replace "^","::set-env name=BUILD_VERSION::"
      - name: Run tests
        run: cargo test --verbose --release --no-default-features --features rustls-tls
      - name: Pick up upload URL
        uses: actions/download-artifact@v1
        with:
          name: release-upload-url
      - name: Prepare to upload artifacts
        shell: bash
        run: |
          cat release-upload-url/release-upload-url.txt
          rm -rf release-upload-url/
          eval $(rustc --print cfg | grep target_)
          echo "::set-env name=target_triple::${target_arch:-unknown}-${target_vendor:-unknown}-${target_os:-unknown}${target_env:+-}${target_env:-}"
      - name: Package binary distributions
        run: |
          Compress-Archive -LiteralPath target\release\k8s-gcr-auth-helper.exe -DestinationPath target\k8s-gcr-auth-helper-${{ env.target_triple }}
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.release_upload_url }}
          asset_path: target/k8s-gcr-auth-helper-${{ env.target_triple }}.zip
          asset_name: k8s-gcr-auth-helper-${{ env.target_triple }}
          asset_content_type: application/zip
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ env.release_upload_url }}
          asset_path: target/wix/k8s-gcr-auth-helper-${{ env.BUILD_VERSION }}-x86_64.msi
          asset_name: k8s-gcr-auth-helper-${{ env.target_triple }}.msi
          asset_content_type: application/x-msi
